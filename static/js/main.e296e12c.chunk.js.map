{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/QualifyingResults.jsx","components/QualifyingTemplate.jsx","index.js"],"names":["App","className","to","Button","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QualifyingResults","props","data","type","x","processedData","q3","y","name","q2","q1","layout","title","track","barmode","QualifyingTemplate","useState","rawData","setRawData","setProcessedData","events","setEvents","setTrack","useEffect","MRData","RaceTable","Races","length","poleTime","Date","Q3","getTime","q1Times","map","driver","Q1","q2Times","Q2","fastestQ1","fastestQ2","forEach","time","parsedTime","push","Driver","givenName","familyName","processData","fetch","method","redirect","response","text","result","res","JSON","parse","catch","error","console","log","circuit","onClick","round","Circuit","circuitName","date","ReactDOM","render","basename","process","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.e296e12c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\nimport Button from '@mui/material/Button';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Formula 1 Data</h1>\n      <h3>Menu</h3>\n      <Link to=\"/quali\"><Button variant=\"contained\">Qualifying Deltas By Race Week</Button></Link>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\n\nfunction QualifyingResults(props) {\n\n  return (\n    <div>\n    <Plot\n      data={[\n        { type: \"bar\", x: props.processedData.q3.x, y: props.processedData.q3.y, name: 'Q3' },\n      \n        { type: \"bar\", x: props.processedData.q2.x, y: props.processedData.q2.y, name: 'Q2' },\n     \n        { type: \"bar\", x: props.processedData.q1.x, y: props.processedData.q1.y, name: 'Q1' },\n      ]}\n      layout={{ title: `Qualifying Sessions - Delta (sec) to Fastest Laps- ${props.track}`, barmode: 'group'}}\n    /> \n    </div>\n  );\n}\n\nexport default QualifyingResults;\n","import React, { useEffect, useState } from \"react\";\nimport QualifyingResults from \"./QualifyingResults\";\nimport Button from '@mui/material/Button';\n\nfunction QualifyingTemplate() {\n  const [rawData, setRawData] = useState({});\n  const [processedData, setProcessedData] = useState({q3: {x: [], y: []}, q2: {x: [], y: []}, q1: {x: [], y: []}});\n  const [events, setEvents] = useState([]);\n  const [track, setTrack] = useState(\"\");\n\n  function processData(data) {\n    if (!data.MRData.RaceTable.Races.length) return;\n    let processedData = {q3: {x: [], y: []}, q2: {x: [], y: []}, q1: {x: [], y: []}}\n    let poleTime = new Date(\"1970-01-01 \" + (\"00:\" + data.MRData.RaceTable.Races[0].QualifyingResults[0].Q3)).getTime();\n\n    let q1Times = data.MRData.RaceTable.Races[0].QualifyingResults.map(driver => {if (driver.Q1 !== \"\") {return driver.Q1}});\n    let q2Times = data.MRData.RaceTable.Races[0].QualifyingResults.map(driver => {if (driver.Q2 !== \"\") {return driver.Q2}});\n\n    let fastestQ1 = null;\n    let fastestQ2 = null;\n\n    q2Times.forEach(time => {\n      let parsedTime = new Date(\"1970-01-01 \" + (\"00:\" + time)).getTime();\n      if (!fastestQ2 || parsedTime < fastestQ2) {fastestQ2 = parsedTime}\n    });\n    q1Times.forEach(time => {\n      let parsedTime = new Date(\"1970-01-01 \" + (\"00:\" + time)).getTime();\n      if (!fastestQ1 || parsedTime < fastestQ1) {fastestQ1 = parsedTime}\n    });\n\n    data.MRData.RaceTable.Races[0].QualifyingResults.forEach(driver => {\n      if (driver.Q3 && driver.Q3 !== \"\") {\n        processedData.q3.x.push(`${driver.Driver.givenName} ${driver.Driver.familyName}`);\n        processedData.q3.y.push((new Date(\"1970-01-01 \" + (\"00:\" + driver.Q3)).getTime() - poleTime)/1000);\n      }\n      if (driver.Q2 && driver.Q2 !== \"\") {\n        processedData.q2.x.push(`${driver.Driver.givenName} ${driver.Driver.familyName}`);\n        processedData.q2.y.push((new Date(\"1970-01-01 \" + (\"00:\" + driver.Q2)).getTime() - fastestQ2)/1000);\n      }\n      if (driver.Q1 && driver.Q1 !== \"\") {\n        processedData.q1.x.push(`${driver.Driver.givenName} ${driver.Driver.familyName}`);\n        processedData.q1.y.push((new Date(\"1970-01-01 \" + (\"00:\" + driver.Q1)).getTime() - fastestQ1)/1000);\n      }\n    });\n    setProcessedData(processedData);\n  }\n\n  function fetchQualiData(round) {\n    var requestOptions = {\n        method: \"GET\",\n        redirect: \"follow\",\n      };\n  \n      fetch(`https://ergast.com/api/f1/2021/${round}/qualifying.json`, requestOptions)\n        .then((response) => response.text())\n        .then((result) => {setRawData(JSON.parse(result))})\n        .catch((error) => console.log(\"error\", error));\n  }\n\n  useEffect(() => {\n    if (rawData.MRData) {\n      processData(rawData);\n    }\n  }, [rawData]);\n\n  useEffect(() => {\n    var requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n      };\n      \n      fetch(\"https://ergast.com/api/f1/current.json\", requestOptions)\n        .then(response => response.text())\n        .then(result => {\n            let res = JSON.parse(result);\n            setEvents(res.MRData.RaceTable.Races)\n        })\n        .catch(error => console.log('error', error));\n  }, []);\n  return (\n    <div className=\"App\">\n        <h3>Choose a circuit</h3>\n        {events.map(circuit => (\n            <Button onClick={() => {fetchQualiData(circuit.round); setTrack(circuit.Circuit.circuitName)}}>{circuit.Circuit.circuitName} - {circuit.date}</Button>\n        ))}\n    <QualifyingResults processedData={processedData} track={track} />\n    </div>\n  );\n}\n\nexport default QualifyingTemplate;\n","import React from 'react';\nimport {\n  HashRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport QualifyingTemplate from './components/QualifyingTemplate';\n\nReactDOM.render(\n  <HashRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"/quali\" element={<QualifyingTemplate />} />\n    </Routes>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}